Day45

今日は3つのトピックをこなし、SKSpriteNodeやSKPhysicsBodyなどについて学びます。

このプロジェクトは、あなたにとってちょっとしたリセットのように感じられることでしょう。これは、私が同じことを繰り返すのが好きだからではなく、
SpriteKitというまったく新しい技術を学ぶことになるからです。

これまであなたが作ってきたものは、AppleのiOS用ユーザーインターフェースツールキットであるUIKitがベースになっています。しかし、UIKitにも限界はありますし、2Dゲームは得意ではありません。

もっと良い解決策はSpriteKitと呼ばれるもので、2Dゲーム用に特別に設計されたAppleの高速で簡単なツールキットです。スプライト、フォント、物理、パーティクルエフェクトなどが含まれており、すべてのiOSデバイスに組み込まれています。何が気に入らないのでしょうか？

このチュートリアルは長くなりそうですが、それはあなたが非常に多くのことを学ぼうとしているからです。正気を保つために、このプロジェクトはできる限り繰り返し行うようにしました。つまり、小さな変更を加えてその結果を議論し、また別の小さな変更を加えてその結果を議論し、プロジェクトが終了するまで続けます。

何を作るのか？多くの人が "Peggle "という名前で知っている、パチンコに似たゲームを作るのです。まず、Xcodeで新しいプロジェクトを作成し、Gameを選択します。Project11と名付け、Game TechnologyをSpriteKitに設定し、すべてのチェックボックスが非選択であることを確認してからどこかに保存してください。

始める前に、プロジェクトはiPadのランドスケープ・モードでのみ動作するように設定してください。

警告SpriteKitのプロジェクトでは、iPadのシミュレーターはゲームの動作が異常に遅いので、実機でテストすることを強くお勧めします。もし実機をお持ちでない場合は、最低スペックのiPadシミュレータをご利用ください。ただし、実機とはまったく異なる恐ろしいパフォーマンスが発生することを覚悟してください。


Falling boxes: SKSpriteNode, UITouch, SKPhysicsBody
まず最初に、ゲームを実行して、デフォルトのSpriteKitテンプレートゲームがどのように見えるかを確認します。グレーの大きなウィンドウに「Hello, World！」と表示され、タップすると2つの回転するボックスが現れるはずです。右下にはノード数（今、画面上にあるものの数）とフレームレートが表示されています。できれば常に60フレーム/秒を目指してください。

プロジェクト・ナビゲーターから GameScene.swift を見つけて開き、その中身をすべて次のように置き換えてください。
import SpriteKit

class GameScene: SKScene {
    override func didMove(to view: SKView) {
    }

    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
    }
}

そのため、ほとんどすべてのコードが削除されます。なぜなら、それは単に必要ないからです。

SpriteKitのInterface Builderに相当するものはシーンエディタと呼ばれ、あの大きな「Hello World」ラベルがあるところです。GameScene.sksを選択してシーン・エディタを開き、「Hello World」ラベルをクリックして削除してください。

シーンエディタを開いている間に、もうひとつ変更したいことがあります。これは、位置合わせを少し単純化するのに役立ちます。シーンを選択した状態で、属性インスペクタ（注：ここではアイコンが異なります！）のアンカーポイントを見てください。これはSpriteKitが子供の位置決めに使う座標で、デフォルトではX:0.5 Y:0.5になっています。

これはUIKitとは異なります。UIKitが左上隅を基準として物事を配置するのに対し、これは「私の中心を基準として私を配置してください」という意味です。通常はこれで問題ありませんが、メインシーンで作業する場合は、この値をX:0 Y:0に設定するのが一番簡単です。アンカーポイントはX,Yともに0であるべきです。

注：SpriteKitはY:0を画面の下と見なしますが、UIKitは上と見なします - 統一性バンザイ

また、アンカーポイントのすぐ上にあるシーンのサイズも変更してほしい。iPadのランドスケープサイズに合わせるために1024x768に変更してください。

補足：9.7インチのiPadは横1024ポイント、縦768ポイントですが、10.5インチと12.9インチはどちらも大きくなります。SpriteKitは1024x768のキャンバスを要求すれば、どのようなデバイスでゲームを実行しても、そのキャンバスを提供してくれます。

最後に、Actions.sksを選択してバックスペースボタンを押し、Xcodeが何をしたいか聞いてきたら「Move to Trash」を選択して削除してください。

これらの変更により、プロジェクトがきれいになり、ビルド可能なバニラ状態に戻りました。

テンプレートが削除されたので、プロジェクトのアセットをインポートしてください。もし、このプロジェクトのコードをまだダウンロードしていないなら、今すぐダウンロードしてください。サンプルプロジェクトのContentフォルダ全体を自分のプロジェクトにコピーして、"Copy items if needed" ボックスにチェックが入っていることを確認する必要があります。


まずは、無地の背景を捨てて、画像に置き換えることから始めましょう。ゲーム内に画像を配置したい場合は、SKSpriteNodeというクラスを使用します。これは、UIImageのようにアプリバンドルから任意の画像を読み込むことができます。

背景画像を配置するには、background.jpgというファイルをロードして、それを画面の中央に配置する必要があります。UIKitとは異なり、SpriteKitでは物事の中心を基準に配置されることを覚えておいてください。つまり、点0,0はノードの水平および垂直方向の中心を指します。また、UIKitとは異なり、SpriteKitのY軸は下端から始まっているので、Yの数値が大きいほどノードは画面上の高い位置に配置されます。したがって、iPadの横長画面の中央に背景画像を配置するには、X:512, Y:384の位置に配置する必要があります。

これからさらに2つのことを行います。どちらもこの背景にのみ必要なことです。まず、ブレンドモードに.replaceを指定します。ブレンドモードはノードの描画方法を決定するもので、SpriteKitでは多くのオプションが用意されています。.replaceオプションは「アルファ値を無視して描画する」という意味で、背景のような隙間のないものに対して高速に描画します。また、背景のzPositionを-1にしています。これは、このゲームでは「他のすべてのものの後ろに描画する」ことを意味します。

現在の画面にノードを追加するには、addChild() メソッドを使用します。予想通り、SpriteKitはUIKitのアプリのようにUIViewControllerを使っていません。確かにプロジェクトにはビューコントローラがありますが、それはSpriteKitのゲームをホストするために存在します。SpriteKitにおけるスクリーンに相当するものは、sceneと呼ばれます。

シーンにノードを追加すると、それはノードツリーの一部となります。addChild()を使うと、ノードを他のノードに追加して、より複雑なツリーを作ることができますが、このゲームではシンプルなツリーを作ることにします。

このコードをdidMove(to:)メソッドに追加します。これはSpriteKitのviewDidLoad()メソッドと同じようなものです。
let background = SKSpriteNode(imageNamed: "background.jpg")
background.position = CGPoint(x: 512, y: 384)
background.blendMode = .replace
background.zPosition = -1
addChild(background)

アプリを起動すると、背景がグレーではなく、ダークブルーの画像になります。

もう少し面白いことをやってみようということで、touchesBegan()メソッドにこんなものを追加してください。

if let touch = touches.first {
    let location = touch.location(in: self)
    let box = SKSpriteNode(color: UIColor.red, size: CGSize(width: 64, height: 64))
    box.position = location
    addChild(box)
}
touchesBegan()は今まで使っていなかったので、最初の2行を説明する必要があります。このメソッドは（UIKitとSpriteKitでは）誰かがデバイスに触れ始めると呼び出されます。複数の指で同時にタッチし始めた可能性があるので、Setという新しいデータ型が渡されます。これは配列のようなものですが、各オブジェクトは一度しか出現しません。

スクリーンがタッチされた場所を知りたいので、条件付き型キャスト＋if letを使って、タッチセットからスクリーンのタッチを取り出し、そのロケーション（in:）メソッドを使って、セルフ、つまりゲームシーンとの関係でスクリーンがタッチされた場所を調べている。UITouchはUIKitのクラスで、SpriteKitでも使用され、タッチの位置や発生した時間などの情報を提供します。

3行目も新しいものですが、やはりSKSpriteNodeです。とりあえずサンプルコードを書いているだけなので、この行はサイズ（64x64）で色（赤）で塗りつぶしたノードを生成しています。CGSize構造体は新しいが、これも単純で、幅と高さを一つの構造体に保持するだけである。

このコードでは、新しいボックスの位置をタップが発生した場所に設定し、シーンに追加しています。Cmd+R キーを押して、これがすべて動作することを確認し、スクリーンの周りをタップしてボックスを表示します。

でも、これだけではつまらないですよね。SpriteKitがどれほど強力なものか、おわかりいただけたでしょうか？新しいボックスの位置を設定する前に、次の行を追加してください。
box.physicsBody = SKPhysicsBody(rectangleOf: CGSize(width: 64, height: 64))
そして、didMove(to:)の直前には、次のように付け加えます。
physicsBody = SKPhysicsBody(edgeLoopFrom: frame)


1 行目のコードでは、ボックスと同じサイズの長方形である物理ボディをボックスに追加しています。2 行目のコードでは、シーン全体に物理ボディが追加され、各辺に線が描かれています。

スクリーンをタップしてボックスを作成することができますが、今度は地面に落ちて跳ね返されるようになりました。また、タップする回数が増えると積み重なり、狙いが定まらないとリアルに倒れてしまいます。

これぞSpriteKitの真骨頂です。でも、まだ始まったばかりです。


